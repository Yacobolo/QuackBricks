// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: catalog.sql

package sqlite

import (
	"context"
)

const createCatalogEntry = `-- name: CreateCatalogEntry :exec
INSERT INTO catalog (
    name, source_type, location, schema_name, description
) VALUES (
    ?, ?, ?, ?, ?
)
`

type CreateCatalogEntryParams struct {
	Name        string  `json:"name"`
	SourceType  string  `json:"source_type"`
	Location    string  `json:"location"`
	SchemaName  *string `json:"schema_name"`
	Description *string `json:"description"`
}

func (q *Queries) CreateCatalogEntry(ctx context.Context, arg CreateCatalogEntryParams) error {
	_, err := q.db.ExecContext(ctx, createCatalogEntry,
		arg.Name,
		arg.SourceType,
		arg.Location,
		arg.SchemaName,
		arg.Description,
	)
	return err
}

const deleteCatalogEntry = `-- name: DeleteCatalogEntry :exec
DELETE FROM catalog
WHERE name = ?
`

func (q *Queries) DeleteCatalogEntry(ctx context.Context, name string) error {
	_, err := q.db.ExecContext(ctx, deleteCatalogEntry, name)
	return err
}

const getCatalogEntry = `-- name: GetCatalogEntry :one
SELECT id, name, source_type, location, schema_name, description, registered_at FROM catalog
WHERE name = ?
LIMIT 1
`

func (q *Queries) GetCatalogEntry(ctx context.Context, name string) (Catalog, error) {
	row := q.db.QueryRowContext(ctx, getCatalogEntry, name)
	var i Catalog
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.SourceType,
		&i.Location,
		&i.SchemaName,
		&i.Description,
		&i.RegisteredAt,
	)
	return i, err
}

const listCatalogEntries = `-- name: ListCatalogEntries :many
SELECT id, name, source_type, location, schema_name, description, registered_at FROM catalog
ORDER BY registered_at DESC
`

func (q *Queries) ListCatalogEntries(ctx context.Context) ([]Catalog, error) {
	rows, err := q.db.QueryContext(ctx, listCatalogEntries)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Catalog
	for rows.Next() {
		var i Catalog
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.SourceType,
			&i.Location,
			&i.SchemaName,
			&i.Description,
			&i.RegisteredAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCatalogEntry = `-- name: UpdateCatalogEntry :exec
UPDATE catalog
SET
    source_type = ?,
    location = ?,
    schema_name = ?,
    description = ?
WHERE name = ?
`

type UpdateCatalogEntryParams struct {
	SourceType  string  `json:"source_type"`
	Location    string  `json:"location"`
	SchemaName  *string `json:"schema_name"`
	Description *string `json:"description"`
	Name        string  `json:"name"`
}

func (q *Queries) UpdateCatalogEntry(ctx context.Context, arg UpdateCatalogEntryParams) error {
	_, err := q.db.ExecContext(ctx, updateCatalogEntry,
		arg.SourceType,
		arg.Location,
		arg.SchemaName,
		arg.Description,
		arg.Name,
	)
	return err
}
