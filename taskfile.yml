version: "3"

env:
  NATS_PORT: 4222
  STATIC_DIR: "app/web/static"
  GOOSE_DRIVER: "sqlite3"
  GOOSE_DBSTRING: "./metastore.db"
  GOOSE_MIGRATION_DIR: "app/internal/sqlite/migrations"

tasks:
  up:
    desc: Run goose up
    cmds:
      - |
        GOOSE_DRIVER=$GOOSE_DRIVER \
        GOOSE_DBSTRING="$GOOSE_DBSTRING" \
        GOOSE_MIGRATION_DIR=$GOOSE_MIGRATION_DIR \
        goose up

  down:
    desc: Run goose down
    cmds:
      - |
        GOOSE_DRIVER=$GOOSE_DRIVER \
        GOOSE_DBSTRING="$GOOSE_DBSTRING" \
        GOOSE_MIGRATION_DIR=$GOOSE_MIGRATION_DIR \
        goose down

  reset:
    desc: Run goose reset
    cmds:
      - |
        GOOSE_DRIVER=$GOOSE_DRIVER \
        GOOSE_DBSTRING="$GOOSE_DBSTRING" \
        GOOSE_MIGRATION_DIR=$GOOSE_MIGRATION_DIR \
        goose reset

  migration:
    desc: Create a new migration file (SQL)
    interactive: true
    cmds:
      - |
        read -p "Enter migration name: " migration_name && \
        goose -dir=$GOOSE_MIGRATION_DIR create "$migration_name" sql

  tools:
    cmds:
      - go install github.com/a-h/templ/cmd/templ@v0.3.833
      - go install github.com/air-verse/air@v1.61.7
      - go install github.com/go-task/task/v3/cmd/task@latest
      - go install github.com/pressly/goose/v3/cmd/goose@latest

  # The `build:` tasks below are used together for "production" builds of your project
  build:templ:
    cmds:
      - templ generate
    sources:
      - "**/*.templ"
    generates:
      - "**/*_templ.go"

  build:styles:
    cmds:
      - pnpm exec tailwindcss -c tailwind.config.js -i web/styles/styles.css -o $STATIC_DIR/index.css
    sources:
      - "./web/**/*.html"
      - "./web/**/*.ts"
      - "./web/**/*.templ"
      - "./web/**/*.go"
    generates:
      - "{{.STATIC_DIR}}/index.js"

  build:esbuild:
    cmds:
      - pnpm exec esbuild web/libs/datastar/index.ts --bundle --outdir=$STATIC_DIR
    sources:
      - "web/libs/datastar/index.ts"
    generates:
      - "{{.STATIC_DIR}}/index.js"

  build:lit-html:
    cmds:
      - pnpm -r --filter=lit-html build
    sources:
      - "web/libs/lit-html/src/**/*.ts"
    generates:
      - "{{.STATIC_DIR}}/lit-html*"

  build:
    cmds:
      - go build -o bin/main .
    deps:
      - build:lit-html
      - build:templ
      - build:esbuild
      - build:styles

  # The `live:` tasks below are used together for "dev" builds and will live-reload your entire project
  live:templ:
    cmds:
      - templ generate --watch --proxy="http://localhost:8080" --open-browser=false

  live:styles:
    cmds:
      - pnpm exec tailwindcss -c tailwind.config.js -i app/web/css/app.css -o $STATIC_DIR/css/index.css --watch

  live:server:
    cmds:
      - |
        air  \
         -build.cmd "go build -o tmp/bin/main ./app/cmd/app" \
         -build.bin "tmp/bin/main" \
         -build.delay "100" \
         -build.exclude_dir "data,node_modules" \
         -build.include_ext "go" \
         -build.stop_on_error "false" \
         -build.send_interrupt "true" \
         -build.kill_delay "200" \
         -misc.clean_on_exit "true"

  live:reload:
    cmds:
      - |
        air \
        -build.cmd "templ generate --notify-proxy" \
        -build.bin "true" \
        -build.delay "300" \
        -build.exclude_dir "" \
        -build.include_dir "$STATIC_DIR" \
        -build.include_ext "js,css" \
        -build.send_interrupt "true" \
        -build.kill_delay "200"

  live:
    deps:
      - live:templ
      - live:styles
      - live:server
      - live:reload

  run:
    cmds:
      - ./bin/main
    deps:
      - build
